// https://codehs.com/sandbox/id/javascript-graphics-SVIDCh
var GRIDUNIT = 25;
var PIPESPEED = -5;
var PIPEWIDTH = 50;
var PIPEHEIGTH = 350
var FLOORY = 425;
var GAPX = 175;
var GAPY = 100;
var READY = 0;
var RUNNING = 1;
var PAUSED = 2;
var GAMEENDING = 3;
var GAMEOVER = 4;

var drawGrid = false;
var gameState = READY;
var pipes = [];
var floors = [];
var bird = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/flappy-yellow.png");
var white = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/white-50.png");
var gameOverImage = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/game-over.png");
var scoreText = new Text("0", "14pt Arial");
var scoreBoard = new Rectangle(225, 125);
var flash = false;
var pipeScrollEnd = 0;
var pipeScrollStart = 0;
var currentAngle = 0;
var highScore = 0;
var score = 0;
var score1 = new Text("Score", "16pt Arial");
var score2 = new Text(score, "16pt Arial");
var best1 = new Text("Best", "16pt Arial");
var best2 = new Text(highScore, "16pt Arial");
var yVo;
var yV;

function start() { 
    setSize(350, 480);
    
    drawBackground();
    
    drawGridLines();

    drawPipes();
    
    resetGame();

    drawFloor();
    
    scaleBirdImage();
    
    setPipeScrollBounds()

    drawScoreBoard();
    
    drawWhiteFlash();

    setTimer(tick, 50);
    
    keyDownMethod(keyDown);
}

function resetGame() {
    score = 0;
    scoreText.setText(score);
    
    hideScoreBoard();
    
    var startPostion = getWidth();
    
    repositionPipes(pipes[0], pipes[1], startPostion , 200);
    repositionPipes(pipes[2], pipes[3], startPostion + GAPX, getRandomHeight());
    repositionPipes(pipes[4], pipes[5], startPostion + (GAPX * 2), getRandomHeight());
    
    for(var i = 0; i < pipes.length; i++) {
        pipes[i].status = 0;
    }
    
    resetBirdAngle();
    currentAngle = 0;
    
    bird.setPosition(getWidth() / 3, getHeight() / 2);
    
    if (bird.hitBox != null) {
        bird.hitBox.setPosition(bird.getX(), bird.getY());
    }
    
    yV = -10;
    yVo = yV;
    
    gameState = READY;
}

function drawBackground() {
    var bg = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/flappy-bg.png");
    bg.setPosition(0, 0);
    add(bg);
}

function drawWhiteFlash() {
    white.setPosition(0, 0);
    white.setSize(getWidth(), getHeight());
}

function scaleBirdImage() {
    // bird.setSize(30, 30);
    var scaler = 0.75
    bird.setSize(50 * scaler, 34 * scaler);
    bird.setPosition(getWidth() / 3, getHeight() / 2);
    add(bird);
    
    var hitBox = new Rectangle(bird.getWidth(), bird.getHeight());
    hitBox.setPosition(bird.getX(), bird.getY());
    hitBox.setColor("#FFFFFF00");
    hitBox.setBorderColor(Color.black);
    hitBox.setBorderWidth(1);
    // add(hitBox);
    
    bird.hitBox = hitBox;
}

function setPipeScrollBounds() {
    pipeScrollEnd = getWidth() / 2 - pipes[0].getWidth() * 2 - (GAPX);
    pipeScrollStart = getWidth() / 2 + pipes[0].getWidth() * 1.5 + (GAPX) + PIPESPEED;
}

function drawFloor() {
    var w = 401;
    var h = 55;
    for (var i = 0; i < 2; i++) {
        var floor = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/flappy-floor.png");
        floor.setSize(w, h);
        floor.setPosition(i * w, FLOORY);
        add(floor);
        floors.push(floor);
    }
}

function drawScoreBoard() {
    scoreText.setPosition(getWidth() / 2, getHeight() - scoreText.getHeight() + 3);
    scoreText.setColor(Color.white);
    add(scoreText);
    
    gameOverImage.setSize(352 * 0.7, 73 * 0.7);
    
    
    scoreBoard.setColor("#ddd995");
    scoreBoard.setBorder(true);
    scoreBoard.setBorderWidth(3);
    
    score1.setColor(Color.white);
    score2.setColor(Color.white);
    best1.setColor(Color.white);
    best2.setColor(Color.white);
    
    hideScoreBoard();
    
    add(gameOverImage);
    add(scoreBoard);
    add(score1);
    add(score2);
    add(best1);
    add(best2);
}

function hideScoreBoard() {
    gameOverImage.setPosition(getWidth() / 2 - gameOverImage.getWidth() / 2, getHeight());
    
    scoreBoard.setPosition(getWidth() / 2 - scoreBoard.getWidth() / 2, getHeight() + 5);
    score1.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - score1.getWidth() - 20, scoreBoard.getY() + 30);
    score2.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - score2.getWidth() - 20, scoreBoard.getY() + 55);
    best1.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - best1.getWidth() - 20, scoreBoard.getY() + 85);
    best2.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - best2.getWidth() - 20, scoreBoard.getY() + 110);
}

function showScoreBoard() {
    if (score > highScore) {
        highScore = score;
    }
    
    score2.setText(score);
    best2.setText(highScore);
    
    gameOverImage.setPosition(gameOverImage.getX(), getHeight() * 0.25);
    
    scoreBoard.setPosition(getWidth() / 2 - scoreBoard.getWidth() / 2, getHeight()  * 0.4);
    score1.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - score1.getWidth() - 20, scoreBoard.getY() + 30);
    score2.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - score2.getWidth() - 20, scoreBoard.getY() + 55);
    best1.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - best1.getWidth() - 20, scoreBoard.getY() + 85);
    best2.setPosition(scoreBoard.getX() + scoreBoard.getWidth() - best2.getWidth() - 20, scoreBoard.getY() + 110);
}

function drawGridLines() {
    if (drawGrid) {
        for (var i = GRIDUNIT; i <= getWidth(); i+=GRIDUNIT) {
            drawGridLine(i, 0, i, getHeight());
        }
        
        for (var j = GRIDUNIT; j <= getHeight(); j+=GRIDUNIT) {
            drawGridLine(0, j, getWidth(), j);
        }
    }
}

function drawGridLine(x1, y1, x2, y2) {
    var line = new Line(x1, y1, x2, y2);
    line.setColor("#C0C0C0");
    if (x1 == getWidth() / 2 || y1 == getHeight() / 2) {
        line.setColor(Color.red);
    }
    line.setLineWidth(1);
    add(line);
}

function drawPipes() {
    pipes.push(drawRectangle(100, 0, 180));
    pipes.push(drawRectangle(100, getHeight() - 200));
    
    pipes.push(drawRectangle(250, 0, 180));
    pipes.push(drawRectangle(250, getHeight() - 200));
    
    pipes.push(drawRectangle(400, 0, 180));
    pipes.push(drawRectangle(400, getHeight() - 200));
}

function drawRectangle(x, y, rotation=0) {
    var rect = new WebImage("https://raw.githubusercontent.com/r0ckl33/chs/master/flappy-assets/pipe.png");
    rect.setSize(50, 350);
    rect.rotate(rotation);
    rect.setPosition(x, y);
    rect.status = 0;
    add(rect);
    return rect;
}

function getRandomHeight() {
    var x = Randomizer.nextInt(50, 275);
    return 25 * Math.floor(x / 25);
}

function repositionPipes(pipeTop, pipeBottom, x, y) {
    pipeTop.setPosition(x, y - pipeTop.getHeight());
    pipeBottom.setPosition(x, y + GAPY);
}

function keyDown(e) {
    if (e.keyCode == Keyboard.letter('P')) {
		if (gameState == PAUSED) {
		    gameState = RUNNING;
		} else {
		    gameState = PAUSED;
		}
	} else if (e.keyCode == Keyboard.letter('T')) {
		tick();
	} else if ((gameState == READY || gameState == PAUSED) && e.keyCode == Keyboard.SPACE) {
	    gameState = RUNNING;
	} else if (gameState == GAMEOVER) {
	    resetGame();
	} if (e.keyCode == Keyboard.letter('R')) {
	    clearFlash();
	} else {
    	yV = -10;
        yVo = yV;
	}
}

function tick() {
    if (gameState == READY) {
        scrollFloor();
    } else if (gameState == RUNNING) {
        flap();
        
        scrollPipes();
        
        scrollFloor();
    
        isGameOver();
    } else if (gameState == GAMEENDING) {
        deathAnimation();
    }
}

function flap() {
    bird.move(0, yV++);
    resetBirdAngle();
    
    if (yV > 15) {
        currentAngle = 70;
    } else if (yV > 6) {
        currentAngle = 45;
    } else if (yV < 0) {
        currentAngle = -45
    } else {
        currentAngle = 0;
    }
    bird.rotate(currentAngle);
    
    if (bird.getY() > getHeight() - bird.getHeight()) {
        yV = yVo * 0.75;
        yVo = yV;

        bird.setPosition(bird.getX(), getHeight() - bird.getHeight());
    }
    
    bird.hitBox.setPosition(bird.getX(), bird.getY());
    bird.hitBox.rotate(currentAngle);
}

function resetBirdAngle() {
    bird.rotate(currentAngle * -1);
    if (bird.hitBox != null) {
        bird.hitBox.rotate(currentAngle * -1);
    }
}

function scrollPipes() {
    for(var i = 0; i < pipes.length; i+=2) {
        pipes[i].move(PIPESPEED, 0);
        pipes[i + 1].move(PIPESPEED, 0);
        
        if (pipes[i].getX() < pipeScrollEnd) {
            repositionPipes(pipes[i], pipes[i + 1], 
                pipeScrollStart, getRandomHeight());
            pipes[i].status = 0;
        }
        
        if (bird.getX() + bird.getWidth() >= pipes[i].getX() + pipes[i].getWidth() / 2) {
            if (pipes[i].status == 0) {
                pipes[i].status = 1;
                scoreText.setText(++score);
            }
        }
    }
}

function scrollFloor() {
    for(var i = 0; i < floors.length; i++) {
        floors[i].move(-5, 0);
        if (floors[i].getX() + floors[i].getWidth() < 0) {
            floors[i].setPosition(floors[i].getWidth() - 5, floors[i].getY());
        }
    }
}

function isGameOver() {
    if (hasCollision(bird, pipes) || hasCollision(bird, floors)) {
        // gameState = GAMEOVER;
        gameState = GAMEENDING;
        flash = true;
        add(white);
    }
}

function hasCollision(bird, array) {
    for(var i = 0; i < array.length; i++) {
        if (bird.getX() + bird.getWidth() > array[i].getX() && bird.getX() < array[i].getX() + array[i].getWidth()) {
            if (bird.getY() + bird.getHeight() > array[i].getY() && bird.getY() < array[i].getY() + array[i].getHeight()) {
                return true;
            }
        }
    }
}

function deathAnimation() {
    if (flash) {
        clearFlash();
    }
    
    if (bird.getY() < FLOORY) {
        if (bird.getY() + bird.getHeight() + 20 > FLOORY) {
            bird.setPosition(bird.getX(), FLOORY - bird.getHeight());
            showScoreBoard();
            gameState = GAMEOVER;
        } else {
            bird.move(0, 20);
        }
        bird.hitBox.setPosition(bird.getX(), bird.getY());
    }
}

function clearFlash() {
    flash = false;
    resetBirdAngle();
    currentAngle = 90;
    bird.rotate(currentAngle);
    bird.hitBox.rotate(currentAngle);
    remove(white);
}