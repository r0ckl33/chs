// https://codehs.com/sandbox/id/javascript-graphics-SVIDCh

var showLogging = true;
var blockSize = 25;
var WALL_URL = "https://raw.githubusercontent.com/r0ckl33/PythonPushBox/master/assets/block.png";
var EGG_URL = "https://raw.githubusercontent.com/r0ckl33/PythonPushBox/master/assets/egg.png";
var FLOOR_URL = "https://raw.githubusercontent.com/r0ckl33/PythonPushBox/master/assets/floor.png";
var NEST_URL = "https://raw.githubusercontent.com/r0ckl33/PythonPushBox/master/assets/nest.png";
var PLAYER_URL = "https://raw.githubusercontent.com/r0ckl33/PythonPushBox/master/assets/player.png";
var player = null;
var walls = [];
var eggs = [];
var floors = [];
var nests = [];
var undo = [];
var redo = [];

function start() {
    player = imageLoadHelper(PLAYER_URL, blockSize, blockSize);
    
    var wall = imageLoadHelper(WALL_URL, blockSize, blockSize);
    wall.setPosition(0, 0);
    add(wall);
    
    var egg = imageLoadHelper(EGG_URL, blockSize, blockSize);
    egg.setPosition(25, 0);
    add(egg);
    
    var floor = imageLoadHelper(FLOOR_URL, blockSize, blockSize);
    floor.setPosition(50, 0);
    add(floor);
    
    var nest = imageLoadHelper(NEST_URL, blockSize, blockSize);
    nest.setPosition(75, 0);
    add(nest);
    
    var p = imageLoadHelper(PLAYER_URL, blockSize, blockSize);
    p.setPosition(100, 0);
    add(p);
    
    keyDownMethod(keyDown);
    
    loadLevel(0);
    log("loaded");
}

function imageLoadHelper(imageUrl, w, h) {
    var image = new WebImage(imageUrl);
    image.setSize(w, h);
    image.setPosition(getWidth() / 2, getHeight() / 2);
    return image;
}

function log(message) {
    if (showLogging) {
        print(message);
    }
}

function keyDown(e) {
    var moveX = 0;
    var moveY = 0;
    
    if (e.keyCode == Keyboard.LEFT) {
		moveX = -blockSize;
	} else if (e.keyCode == Keyboard.RIGHT) {
		moveX = blockSize;
	} else if (e.keyCode == Keyboard.UP) {
		moveY = -blockSize;
	} else if (e.keyCode == Keyboard.DOWN) {
		moveY = blockSize;
	}
	// set undo for player and egg positions
    // check for collision with egg, move egg
    // check for collision with wall / egg on egg or wall
    // undo if collision
    // check for all eggs to be on all nests
	player.move(moveX, moveY);
}

function loadLevel(level) {
    removeTiles(floors);
    removeTiles(walls);
    removeTiles(nests);
    removeTiles(eggs);
    
    var w = levels[level][0].length;
    var h = levels[level].length;
    log('level size: ' + w + ' x ' + h);
    
    var x = (getWidth() / 2) - (w * blockSize / 2);
    var y = (getHeight() / 2) - (h * blockSize / 2);
    log('origin: ' +x + ' x ' + y);
    
    var xOffset = 0;
    var yOffset = 0;
    remove(player);
    
    for(var j = 0; j < h; j++) {
        for(var i = 0; i < w; i++) {
            var index = levels[level][j].substr(i, 1);
            if (index == "0") {
                floors.push(loadTile(x + xOffset, y + yOffset, FLOOR_URL));
            } else if (index == "1") {
                walls.push(loadTile(x + xOffset, y + yOffset, WALL_URL));
            } else if (index == "2") {
                nests.push(loadTile(x + xOffset, y + yOffset, NEST_URL));
            } else if (index == "3") {
                floors.push(loadTile(x + xOffset, y + yOffset, FLOOR_URL));
                eggs.push(loadTile(x + xOffset, y + yOffset, EGG_URL));
            } else if (index == "4") {
                floors.push(loadTile(x + xOffset, y + yOffset, FLOOR_URL));
                player.setPosition(x + xOffset, y + yOffset);
                
            }
            xOffset += blockSize;
        }
        xOffset = 0;
        yOffset += blockSize;
    }
    addTiles(floors);
    addTiles(walls);
    addTiles(nests);
    addTiles(eggs);
    add(player);
}

function loadTile(x, y, url) {
    var tile = imageLoadHelper(url, blockSize, blockSize);
    tile.setPosition(x, y);
    return tile;
}

function removeTiles(array) {
    for(var i = 0; i < array.length; i++) {
        add(array[i]);
    }
}

function addTiles(array) {
    for(var i = 0; i < array.length; i++) {
        add(array[i]);
    }
}

var levels = [
    ["11111111","10000021","14030301","10000021","11111111"],
    ["  111   ","  121   ","  101111","11130321","12034111","111131  ","   121  ","   111  "],
    ["1111111","1000001","1403001","1113101","1000101","1200001","1200001","1203001","1111111"]//,
    //["11111    ","14001    ","10331 111",""10301 121","111011121"," 11000021"," 10001001"," 10001111"," 11111   "]
];


















