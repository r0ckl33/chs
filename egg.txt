// https://codehs.com/sandbox/id/javascript-graphics-SVIDCh

var rows = 5;
var cols = 5;
var SQUARE_SIZE = 41;
var squares = null;
var outline1 = new Line(0, 0, 0, 0);
var outline2 = new Line(0, 0, 0, 0);
var outline3 = new Line(0, 0, 0, 0);
var outline4 = new Line(0, 0, 0, 0);
var flagText = new Text("00", "12pt Arial");
var startButton = new Rectangle(100, 25);
var currentSquare = null;
var bombAmount = 0;
var banner = null;
var clock = null;
var ticks = 0;
var READY = 1;
var RUNNING = 2;
var GAMEOVER = 4;
var gameState = READY;
var gameOverImage = null;
var loserUrl = null;
var winnerUrl = null;

function start() {
    drawBanner();
    drawStartButton();
    drawMineField();
    initializeClock();
    mouseMoveMethod(onMouseMove);
    mouseClickMethod(onMouseClick);
    keyDownMethod(onkeyDown);
    preLoadImage();
}

function reset() {
    print("game started");
    stopTimer(onTick);
    currentSquare = null;
    if (squares != null) {
        squares.init(null);
    }
    removeAll();
    ticks = 0;
    
    drawBanner();
    drawStartButton();
    initializeClock();
    intialize();
}

function intialize() {
    drawMineField();
    testField();
    //plantBombs();
    //showBombs();
    drawFrame();
    keyDownMethod(onkeyDown);
    setTimer(onTick, 1000);
}

function preLoadImage() {
    loserUrl = safeLoadImage("https://i.gifer.com/3mpp.gif", 471 * 0.75, 366 * 0.75);
    winnerUrl = safeLoadImage("https://i.imgur.com/GQp8XLk.png", 500 * 0.75, 282 * 0.75);
    // try {
    //     // loserUrl = new WebImage("https://i.gifer.com/3mpp.gif");
    //     // loserUrl.setSize(471 * 0.75, 366 * 0.75);
    //     // loserUrl.setPosition(getWidth()/2 - loserUrl.getWidth()/2, getHeight());
    //     // add(loserUrl);
    // } catch {
    //     // to bad :(
    // }
    // try {
    //     winnerUrl = new WebImage("https://i.imgur.com/GQp8XLk.png");
    //     winnerUrl.setSize(500 * 0.75, 282 * 0.75);
    //     winnerUrl.setPosition(0, 0);
    //     add(winnerUrl);
    // } catch {
        
    // }
}

function safeLoadImage(imageUrl, w, h) {
    try {
        var image = new WebImage(imageUrl);
        image.setSize(w, h);
        image.setPosition(getWidth()/2 - image.getWidth()/2, getHeight());
        return image;
    } catch {
        // to bad :(
        print(':(');
        return null;
    }
}

function drawStartButton() {
    var x = getWidth() / 2 - 100 / 2;
    var y = 25;

    startButton.setPosition(x, y);
    startButton.setColor("#eff2f4");
            
    var txt = new Text("Click to Start", "12pt Arial");
    txt.setPosition(
        (startButton.getX() + startButton.getWidth() / 2) - txt.getWidth() / 2, 
        (startButton.getY() + 1 + startButton.getHeight()) - txt.getHeight() / 2);
    txt.setColor("#2499cc");
    
    var background = new Rectangle(startButton.getWidth() + 2, startButton.getHeight() + 2);
    background.setPosition(startButton.getX() - 1, startButton.getY() - 1);
    background.setColor("#2499cc");
    add(background);
    
    add(startButton);
    add(txt);
}

function drawBanner() {
    banner = new Rectangle(SQUARE_SIZE * cols, 50);
    banner.setPosition(getMineFieldX(), getMineFieldY() - banner.getHeight());
    banner.setColor("#4a752c");
    add(banner);
    
    drawFlagCount();
}
function drawFlagCount() {
    var rect = new Rectangle(SQUARE_SIZE - 0, SQUARE_SIZE - 0);
    rect.setPosition(banner.getX() + banner.getWidth() / 2 - rect.getWidth() - 35, banner.getY() + banner.getHeight() / 2 - rect.getHeight() / 2);
    rect.setColor("#4a752c");
    add(rect);
    addMarker(rect)
    
    flagText.setText("0");
    flagText.setPosition(banner.getX() + banner.getWidth() / 2 - flagText.getWidth() - 25, banner.getY() + banner.getHeight() / 2 + flagText.getHeight() / 2);
    flagText.setColor(Color.white);
    add(flagText);
}
function initializeClock() {
    clock = new Text("000", "12pt Arial");
    setClockPosition();
    clock.setColor(Color.white);
    add(clock);
    drawClock();
}
function setClockPosition() {
    clock.setPosition(banner.getX() + banner.getWidth() / 2 + clock.getWidth() + 20, banner.getY() + banner.getHeight() / 2 + clock.getHeight() / 2);
}
function onTick() {
    var text = "00" + ++ticks;
    clock.setText(text.substring(text.length - 3, text.length));
    if (ticks >= 999) {
        stopTimer(onTick);
    }
}
function drawClock() {
    var bg = new Circle(11);
    bg.setPosition(clock.getX() - 20, clock.getY() - 7);
    bg.setColor("#ffd156");
    add(bg);
    
    var fg = new Circle(7);
    fg.setPosition(bg.getX(), bg.getY());
    fg.setColor("#f2f2f2");
    add(fg);
    
    var top = new Rectangle(10, 4);
    top.setPosition(bg.getX() - top.getWidth() / 2, bg.getY() - bg.getRadius() - 4);
    top.setColor("#ffd156");
    add(top);
    
    var line1 = new Line(bg.getX(), bg.getY() + 1, bg.getX(), bg.getY() - 4);
    line1.setLineWidth(1);
    add(line1);
    
    var line2 = new Line(bg.getX(), bg.getY() + 1, bg.getX() + 5, bg.getY() - 4);
    line2.setLineWidth(1);
    add(line2);
}

function incrementFlagCount() {
    bombAmount++;
    flagText.setText(bombAmount);
}
function decrementFlagCount() {
    bombAmount--;
    flagText.setText(bombAmount);
}

function addMarker(square) {
    var x = square.getX() + square.getWidth() / 2 - 11;
    var y = square.getY();
    
    var staff = new Rectangle(3, 23);
    staff.setPosition(x + 5, y + 7);
    staff.setColor(Color.red);
    add(staff);
    
    var flag = new Rectangle(13, 10);
    flag.setPosition(staff.getX() + staff.getWidth(), staff.getY() + 2);
    flag.setColor(Color.red);
    add(flag);
    
    var base = new Rectangle(7, 3);
    base.setPosition(staff.getX() - 2, staff.getY() + staff.getHeight());
    base.setColor(Color.red);
    add(base);
    
    square.marker = {
        staff: staff,
        flag: flag,
        base: base
    };
    
    decrementFlagCount();
}
function removeMarker(square) {
    remove(square.marker.staff);
    remove(square.marker.flag);
    remove(square.marker.base);
    square.marker = undefined;
    incrementFlagCount();
}

function getMineFieldX() {
    return getWidth() / 2 - (SQUARE_SIZE * cols) / 2;
}

function getMineFieldY() {
    return getHeight() / 2 - (SQUARE_SIZE * rows) / 2  + banner.getHeight() / 2;
}

function drawMineField() {
    var x = 0;
    var y = 0;
    
    var reverseColor = false;
    var offsetX = getMineFieldX();
    var offsetY = getMineFieldY();
    squares = new Grid(rows, cols);
    
    for(var j = 0; j < rows; j++) {
        for(var i = 0; i < cols; i++) {
            var rect = new Rectangle(SQUARE_SIZE, SQUARE_SIZE);
            rect.setPosition(offsetX + x, offsetY + y);
            if (reverseColor) {
                rect.setColor("#a2d149");
            } else {
                rect.setColor("#aad751");
            }
            reverseColor = !reverseColor;
            rect.isBomb = false
            squares.set(j, i, rect);
            add(rect);
            x += rect.getWidth();
        }
        y += rect.getHeight();
        x = 0;
    }
}

function testField() {
    bombAmount = 3;
    squares.get(1, 1).isBomb = true;
    squares.get(1, 2).isBomb = true;
    squares.get(4, 3).isBomb = true;
    flagText.setText(bombAmount);
}

function plantBombs() {
    bombAmount = Math.floor(rows * cols * 0.15);
    var bombsPlanted = 0;
    while (bombsPlanted < bombAmount) {
        var row = Randomizer.nextInt(0, rows - 1);
        var col = Randomizer.nextInt(0, cols - 1)
        if (!squares.get(row, col).isBomb) {
            squares.get(row, col).isBomb = true;  
            bombsPlanted++;
        }
    }
    flagText.setText(bombAmount);
}

function drawFrame() {
    add(outline1);
    add(outline2);
    add(outline3);
    add(outline4);
    outline1.setLineWidth(1);
    outline2.setLineWidth(1);
    outline3.setLineWidth(1);
    outline4.setLineWidth(1);
}

function updateFrame(square) {
    var w = square.getWidth();
    var h = square.getHeight();
    
    var x1 = square.getX();
    var y1 = square.getY();
    
    var x2 = x1 + square.getWidth();
    var y2 = y1 + square.getHeight();

    outline1.setPosition(x1, y1);
    outline1.setEndpoint(x2, y1);
    
    outline2.setPosition(x2, y1);
    outline2.setEndpoint(x2, y2);
    
    outline3.setPosition(x1, y1);
    outline3.setEndpoint(x1, y2);
    
    outline4.setPosition(x1, y2);
    outline4.setEndpoint(x2, y2);
}

function onMouseMove(e) {
    toggleButtonColor(e, startButton, "#dddddd", "#eff2f4");
    
    if (gameState == RUNNING && isMouseOverBoard(e)) {
        for(var j = 0; j < rows; j++) {
            for(var i = 0; i < cols; i++) {
                if (isMouseOverSquare(e, squares.get(j, i))) {
                    updateFrame(squares.get(j, i));
                    currentSquare = squares.get(j, i);
                    return;
                }
            }
        }
    }
}

function toggleButtonColor(e, button, hoverColor, defaultColor) {
    if (button.containsPoint(e.getX(), e.getY())) {
        button.setColor(hoverColor);
    } else {
        if (button.getColor() == hoverColor) {
            button.setColor(defaultColor);
        }
    }
}

function isMouseOverBoard(e) {
    var w = squares.get(0, 0).getWidth();
    var h = squares.get(0, 0).getHeight();
    
    var topLeft = squares.get(0, 0);
    var lowerRight = squares.get(squares.numRows() - 1, squares.numCols() - 1);
    
    return e.getX() >= topLeft.getX() && e.getX() <= lowerRight.getX() + w &&
           e.getY() >= topLeft.getY() && e.getY() <= lowerRight.getY() + h;
}

function isMouseOverSquare(e, square) {
    return e.getX() >= square.getX() && 
           e.getX() <= square.getX() + square.getWidth() &&
           e.getY() >= square.getY() && 
           e.getY() <= square.getY() + square.getHeight()
}

function onMouseClick(e) {
    if (startButton.containsPoint(e.getX(), e.getY())) {
        gameState = RUNNING;
        reset();
    }
    
    if (gameState == GAMEOVER) {
        remove(gameOverImage);
        gameState = READY;
    }
    
    if (gameState == RUNNING && isMouseOverBoard(e)) {
        for(var j = 0; j < rows; j++) {
            for(var i = 0; i < cols; i++) {
                if (isMouseOverSquare(e, squares.get(j, i))) {
                    if (squares.get(j, i).isBomb) {
                        println("THOU ART DEAD");
                        showBombs();
                        stopTimer(onTick);
                        gameState = GAMEOVER;
                        
                        if (loserUrl != null) {
                            gameOverImage = loserUrl;
                            add(gameOverImage);
                            setTimer(onGameOverTick, 50);
                        }
                        return;
                    }
                    
                    if (squares.get(j, i).adjacentBombs != undefined) {
                        return;
                    }
                    
                    squares.get(j, i).adjacentBombs = countAdjacentMines(j, i);
                    
                    toggleSquareColor(squares.get(j, i));

                    if (squares.get(j, i).adjacentBombs == 0) {
                        // recursively check cells
                        revealCells(j, i);
                    } else {
                        printAdjacentBombCount(squares.get(j, i));
                    }

                    if (isComplete()) {
                        print("winner");
                        stopTimer(onTick);
                        gameState = GAMEOVER;
                        
                        if (winnerUrl != null) {
                            gameOverImage = winnerUrl;
                            add(winnerUrl);
                            setTimer(onGameOverTick, 50);
                        }
                        return;
                    }
                    
                    return;
                }
            }
        }
    }
}

function onkeyDown(e) {
    // if(e.keyCode == Keyboard.letter('K')){
    // if (e.keyCode == Keyboard.LEFT) {
    if (gameState == RUNNING && currentSquare != null) {
        if (currentSquare.marker == undefined) {
            addMarker(currentSquare);
        } else {
            removeMarker(currentSquare);
        }
    }
}

function isComplete() {
    for(var j = 0; j < rows; j++) {
        for(var i = 0; i < cols; i++) {
            if (!squares.get(j, i).isBomb) {
                if (squares.get(j, i).adjacentBombs == undefined) {
                    return false;   
                }
            }
        }
    }
    return true;
}

function showBombs() {
    for(var j = 0; j < rows; j++) {
        for(var i = 0; i < cols; i++) {
            if (squares.get(j, i).isBomb) {
                var bomb = new Circle(SQUARE_SIZE / 4);
                bomb.setPosition(
                    squares.get(j, i).getX() + squares.get(j, i).getWidth() / 2, 
                    squares.get(j, i).getY() + squares.get(j, i).getHeight() / 2);
                bomb.setColor("#a83237");
                add(bomb);
                
                moveMakerInFrontOfBomb(squares.get(j, i));
            }
        }
    }
}

function moveMakerInFrontOfBomb(square) {
    // if a bomb and marker share the same space move the marker in front of the bomb
    if (square.marker != undefined) {
        removeMarker(square);
        addMarker(square);
    }
}

function toggleSquareColor(square) {
    if (square.getColor() == "#e5c29f" || square.getColor() == "#d7b899") {
        return;
    }
    if (square.getColor() == "#aad751") {
        square.setColor("#e5c29f");
    } else {
        square.setColor("#d7b899");
    }
}

function revealCells(row, col) {
    if (squares.get(row, col).adjacentBombs != 0) {
        return;
    }
        
    var minRow = row - 1;
    var minCol = col - 1;
    var maxRow = row + 1
    var maxCol = col + 1

    // print("minRow: " + minRow + ", minCol: " + minCol);
    // print("row:    " + row    + ", col:     " + col);
    // print("maxRow: " + maxRow + ", maxCol:  " + maxCol);
    
    for(var y = minRow; y <= maxRow; y++) {
        for(var x = minCol; x <= maxCol; x++) {
            if (y != row || x != col) {
                if (x >= 0 && y >= 0 && x < squares.numCols() && y < squares.numRows()) {
                    // print('y' + y + ', x' + x);
                    
                    if (squares.get(y, x).adjacentBombs != undefined) {
                        continue;
                    }
                    
                    squares.get(y, x).adjacentBombs = countAdjacentMines(y, x);
                
                    if (squares.get(y, x).marker != undefined) {
                        removeMarker(squares.get(y, x));
                    }
                    
                    toggleSquareColor(squares.get(y, x));
                    
                    if (squares.get(y, x).adjacentBombs == 0) {
                        // recursively check cells
                        revealCells(y, x);
                    } else {
                        printAdjacentBombCount(squares.get(y, x));
                    }
                }
            }
        }
    }
}

function printAdjacentBombCount(square) {
    var txt = new Text(square.adjacentBombs, "20pt Arial");
    txt.setPosition(square.getX() + (square.getWidth() / 2), square.getY() + (square.getHeight() / 2));
    txt.setPosition(txt.getX() - (txt.getWidth() / 2), txt.getY() + (txt.getHeight() / 2) - 3);
    txt.setColor(Color.blue);
    add(txt);
}

function countAdjacentMines(row, col) {
    var minRow = row - 1;
    var minCol = col - 1;
    var maxRow = row + 1
    var maxCol = col + 1
    var bombCounter = 0;
    
    for(var y = minRow; y <= maxRow; y++) {
        for(var x = minCol; x <= maxCol; x++) {
            if (x >= 0 && y >= 0 && x < squares.numCols() && y < squares.numRows()) {
                if (squares.get(y, x).isBomb) {
                    bombCounter++;
                }
            }
        }
    }
    return bombCounter;
}

function onGameOverTick() {
    if (gameOverImage.getY() >= getHeight()/2 - gameOverImage.getHeight()/2) {
        gameOverImage.move(0, -10);
    } else {
        stopTimer(onGameOverTick);
    }
}